doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Session Data
    script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.js")
    link(rel="stylesheet", type="text/css", href="/stylesheets/style.css")
    script.
      const data = !{JSON.stringify(data)}
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelector('select[name="sessionId"]').addEventListener('change', (e) => {
          fetchDataForSession(event.target.value)
        })

        function updateCharts(sessionData) {
          const transformedData = sessionData.allClicks.map(click => {
            const valueObj = JSON.parse(click.value);
            return {
                timestamp: new Date(click.timestamp),
                totalClicks: valueObj.total, // Cumulative total clicks
                left: valueObj.left,
                middle: valueObj.middle,
                right: valueObj.right,
                awardedPoints: valueObj.awardedPoints, // Points awarded for this specific click
                totalPoints: valueObj.pointsCounter // Cumulative total points
            };
          });
          console.log(transformedData)

          const margin = {top: 20, right: 20, bottom: 30, left: 50},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

          // Append the svg object to the body of the page
          const svg = d3.select("#clickGraph")
            .append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

          // X scale will use the timestamp of each click event
          const x = d3.scaleTime()
            .domain(d3.extent(transformedData, d => d.timestamp))
            .range([ 0, width ]);
          svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

          // Add Y axis for clicks
          const yLeft = d3.scaleLinear()
            .domain([0, d3.max(transformedData, d => Math.max(d.left, d.middle, d.right))])
            .range([ height, 0 ]);
          svg.append("g")
            .call(d3.axisLeft(yLeft));

          // Optional: Add Y axis for points on the right
          const yRight = d3.scaleLinear()
            .domain([0, d3.max(transformedData, d => d.awardedPoints)])
            .range([ height, 0 ]);
          svg.append("g")
            .attr("transform", `translate(${width},0)`)
            .call(d3.axisRight(yRight));

          // Add paths for each button type
          // Example for left clicks
          const lineLeft = d3.line()
            .x(d => x(d.timestamp))
            .y(d => yLeft(d.left));
          svg.append("path")
            .datum(transformedData)
            .attr("fill", "none")
            .attr("stroke", "green")
            .attr("d", lineLeft);

        }

        function fetchDataForSession(sessionId) {
          if (!sessionId) return

          fetch(`/graphs/${sessionId}`)
          .then(response => response.json())
          .then(sessionData => {
            console.log(sessionData)
            updateCharts(sessionData)
          })
          .catch(error => console.error('Error fetching session data:', error))
        }
      })
  body
    .main-container
      h1 Session Data
      .select-container
        select(name="sessionId")
          option(value="") Select a Session
          each sessionId in data
            option(value=sessionId.sessionId)= sessionId.sessionId
      .graph-container
        div#clickGraph
