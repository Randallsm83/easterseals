doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Session Page
    link(rel="stylesheet", type="text/css", href="/stylesheets/style.css")
    script.
      const config = !{JSON.stringify(config)}
      document.addEventListener('DOMContentLoaded', function() {
        const sessionId = config.sessionId
        const buttonActive = config.buttonActive
        const pointsAwarded = +config.pointsAwarded
        const clicksNeeded = +config.clicksNeeded
        const startingPoints = +config.startingPoints
        const sessionLength = +config.sessionLength
        const sessionLengthType = config.sessionLengthType
        const continueAfterLimit = config.continueAfterLimit === 'on'

        let clickInfo = {
          total: 0,
          left: 0,
          middle: 0,
          right: 0,
          buttonClicked: '',
          awardedPoints: 0
        }
        let sessionInfo = {
          pointsCounter: startingPoints,
          pointsEarnedFinal: 0,
          limitReached: false
        }

        const buttons = document.querySelectorAll('button[type="submit"]')
        const pointsDisplay = document.getElementById('pointsDisplay')
        const sessionOverDisplay = document.getElementById('sessionOverDisplay')

        function handleLimitReached() {
          sessionInfo.limitReached = true

          if (!continueAfterLimit) {
            buttons.forEach(button => button.disabled = true)

            sessionOverDisplay.innerText = sessionLengthType === 'points' ? "Max points reached, session ended." : "Time limit reached. Session ended."
          }

          sessionInfo.pointsEarnedFinal = sessionInfo.pointsCounter

          fetch('/log-event', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sessionId, event: 'end', value: sessionInfo }),
          })
          .catch((error) => {
            console.error('===Error logging session end:', error)
          })
        }

        let clickIntervalCounter = 0
        document.querySelector('form').addEventListener('submit', async function(event) {
          event.preventDefault()

          const timestamp = new Date().toISOString()
          const clickedButton = event.submitter.name

          clickInfo['buttonClicked'] = clickedButton
          clickInfo[clickedButton]++
          clickInfo.total++

          if (clickedButton === buttonActive) clickIntervalCounter++

          if (clickIntervalCounter >= clicksNeeded) {
            clickIntervalCounter = 0

            if (!sessionInfo.limitReached) {
              clickInfo.awardedPoints = pointsAwarded
            }
            sessionInfo.pointsCounter += pointsAwarded

            if (!sessionInfo.limitReached && sessionLengthType === 'points' && sessionInfo.pointsCounter >= sessionLength) {
              clickInfo.awardedPoints =  sessionInfo.pointsCounter - sessionLength
              sessionInfo.pointsCounter = sessionLength
              handleLimitReached()
            }

            pointsDisplay.innerText = sessionInfo.pointsCounter
          }

          fetch('/log-event', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sessionId, event: 'click', value: {...clickInfo, ...sessionInfo}, timestamp }),
          })
          .catch((error) => {
            console.error('===Error logging click:', error)
          })

          clickInfo.awardedPoints = 0
          clickInfo.buttonClicked = ''
        })

        if (sessionLengthType === 'seconds') {
          setTimeout(() => {
            handleLimitReached()
          }, sessionLength * 1000) // Convert seconds to milliseconds
        }

        fetch('/log-event', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({ sessionId, event: 'start', value: sessionInfo }),
        })
        .catch((error) => {
          console.error('===Error logging session start:', error)
        })
      })
  body
    .main-container
      p#pointsDisplay #{config.startingPoints}
      form(id="sessionForm")
        .buttons-container
          button(type="submit" name="left" value="left" class=config.leftButtonShape style=`background-color: ${config.leftButtonColor}`) Click Me
          button(type="submit" name="middle" value="middle" class=config.middleButtonShape style=`background-color: ${config.middleButtonColor}`) Click Me
          button(type="submit" name="right" value="right" class=config.rightButtonShape style=`background-color: ${config.rightButtonColor}`) Click Me
      p#sessionOverDisplay(class="error-message")

